from snakemake.utils import min_version, validate

import pandas as pd
from collections import defaultdict
import os

##### setup remote providers #####
from snakemake.remote import FTP, HTTP

FTP = FTP.RemoteProvider()
HTTP = HTTP.RemoteProvider()


def remote_or_local(path: str):
    "Specify remote provider if path is a URL, otherwise return path"
    if path.startswith("ftp"):
        return FTP.remote(path, immediate_close=True)
    elif path.startswith("http"):
        return HTTP.remote(path)
    elif os.path.exists(path):
        return path
    else:
        raise ValueError(f"Could not find {path}")


##### set minimum snakemake version #####
min_version("7.32.0")


##### read and validate config file #####
configfile: "config.yaml"


validate(config, "config.schema.yaml")

# constrain wildcards according to config
txomes, tx_sims, te_sims, sims = set(), set(), set(), set()
for txome in config["txomes"]:
    for tx_sim in config["txomes"][txome]["simulations"]:
        for te_sim in config["txomes"][txome]["simulations"][tx_sim]["te_sim"]:
            txomes.add(txome)
            tx_sims.add(tx_sim)
            te_sims.add(te_sim)
            sims.add(tx_sim + "/" + te_sim)


wildcard_constraints:
    txome="|".join(txomes),
    tx_sim="|".join(tx_sims),
    te_sim="|".join(te_sims),
    sim="|".join(sims),


include: "make_txome/make_txome.smk"
include: "simulate/simulate.smk"
include: "star/star.smk"
include: "tetranscripts/tetranscripts.smk"
include: "salmon/salmon.smk"
include: "l1em/l1em.smk"
include: "aggregate/aggregate.smk"


def get_final_output(wc):
    final_output = []
    for txome in config["txomes"]:
        for tx_sim in config["txomes"][txome]["simulations"]:
            for te_sim in config["txomes"][txome]["simulations"][tx_sim]["te_sim"]:
                final_output.extend(
                    expand(
                        rules.aggregate.output,
                        txome=txome,
                        sim=tx_sim + "/" + te_sim,
                    )
                )
    return final_output


rule all:
    input:
        get_final_output,
