from snakemake.utils import min_version, validate

import pandas as pd
from collections import defaultdict
import os

##### setup remote providers #####
from snakemake.remote import FTP, HTTP

FTP = FTP.RemoteProvider()
HTTP = HTTP.RemoteProvider()


def remote_or_local(path: str):
    "Specify remote provider if path is a URL, otherwise return path"
    if path.startswith("ftp"):
        return FTP.remote(path, immediate_close=True)
    elif path.startswith("http"):
        return HTTP.remote(path)
    elif os.path.exists(path):
        return path
    else:
        raise ValueError(f"Could not find {path}")


##### set minimum snakemake version #####
min_version("7.32.0")


##### read and validate config file #####
configfile: "config.yaml"


validate(config, "config.schema.yaml")


include: "make_txome/make_txome.smk"
include: "simulate/simulate.smk"
include: "star/star.smk"
include: "tetranscripts/tetranscripts.smk"
include: "salmon/salmon.smk"
include: "l1em/l1em.smk"
include: "aggregate/aggregate.smk"
include: "analysis/analysis.smk"


##### setup output samples #####


def get_final_output(wc):
    final_output = []
    for txome in config["txomes"]:
        for tx_sim in config["txomes"][txome]["simulations"]:
            for te_sim in config["txomes"][txome]["simulations"][tx_sim]["te_sim"]:
                final_output.extend(
                    expand(
                        rules.analyze.output,
                        txome=txome,
                        tx_sim=tx_sim,
                        te_sim=te_sim,
                    )
                )
    return final_output


rule all:
    input:
        get_final_output,
